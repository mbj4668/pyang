<?xml version="1.0" encoding="UTF-8"?>
<module name="new"
        xmlns="urn:ietf:params:xml:ns:yang:yin:1"
        xmlns:n="urn:new">
  <yang-version value="1.1"/>
  <namespace uri="urn:new"/>
  <prefix value="n"/>
  <feature name="f"/>
  <feature name="g"/>
  <identity name="id">
    <if-feature name="f"/>
  </identity>
  <leaf name="l1">
    <type name="enumeration">
      <enum name="r">
        <if-feature name="f"/>
      </enum>
    </type>
  </leaf>
  <leaf name="l2">
    <type name="bits">
      <bit name="b">
        <if-feature name="f"/>
      </bit>
    </type>
  </leaf>
  <container name="yy">
    <leaf name="foo">
      <type name="empty"/>
    </leaf>
    <if-feature name="f or g"/>
  </container>
  <grouping name="g">
    <container name="x"/>
  </grouping>
  <uses name="g">
    <refine target-node="x">
      <if-feature name="f"/>
    </refine>
  </uses>
  <container name="w">
    <choice name="c1">
      <choice name="c2"/>
    </choice>
  </container>
  <typedef name="id">
    <type name="string">
      <pattern value="[a-zA-Z_][a-zA-Z0-9\-_.]*"/>
      <pattern value="[xX][mM][lL].*">
        <modifier value="invert-match"/>
      </pattern>
    </type>
  </typedef>
  <rpc name="r">
    <input>
      <must condition="g"/>
      <leaf name="g">
        <type name="int32"/>
      </leaf>
    </input>
    <output>
      <must condition="g"/>
      <leaf name="g">
        <type name="int32"/>
      </leaf>
    </output>
  </rpc>
  <notification name="n">
    <must condition="g"/>
    <leaf name="g">
      <type name="int32"/>
    </leaf>
  </notification>
  <container name="t">
    <must condition='re-match("hej", "dsop")'/>
    <must condition="deref(.)"/>
    <leaf name="idleafderrived">
      <type name="identityref">
        <base name="id2"/>
        <base name="id5"/>
      </type>
      <default value="id7"/>
    </leaf>
    <must condition='derived-from(idleafderrived, "id2")'/>
    <must condition='derived-from-or-self(idleafderrived, "id2")'/>
    <leaf name="ofenum">
      <type name="e1"/>
    </leaf>
    <leaf name="ofbit">
      <type name="bits">
        <bit name="hej">
          <if-feature name="f"/>
        </bit>
      </type>
    </leaf>
    <must condition="enum-value(./ofenum)"/>
    <must condition='bit-is-set(./ofbit, "hej")'/>
  </container>
  <identity name="id1"/>
  <identity name="id2"/>
  <identity name="id3">
    <base name="id1"/>
    <base name="id2"/>
  </identity>
  <identity name="id4">
    <base name="id2"/>
  </identity>
  <identity name="id5">
    <base name="id3"/>
    <base name="id4"/>
  </identity>
  <identity name="id6">
    <base name="id2"/>
  </identity>
  <identity name="id7">
    <base name="id5"/>
  </identity>
  <leaf name="idleaf1">
    <type name="identityref">
      <base name="id2"/>
      <base name="id5"/>
    </type>
    <default value="id7"/>
  </leaf>
  <leaf name="idleaf2">
    <type name="identityref">
      <base name="id5"/>
    </type>
    <default value="id7"/>
  </leaf>
  <leaf name="idleaf3">
    <type name="identityref">
      <base name="id2"/>
    </type>
    <default value="id5"/>
  </leaf>
  <typedef name="e1">
    <type name="enumeration">
      <enum name="a"/>
      <enum name="b"/>
      <enum name="c"/>
    </type>
  </typedef>
  <typedef name="e2">
    <type name="e1">
      <enum name="a"/>
      <enum name="b"/>
    </type>
  </typedef>
  <leaf-list name="ll">
    <type name="int32"/>
    <default value="1"/>
    <default value="2"/>
  </leaf-list>
  <container name="w2">
    <action name="a"/>
    <notification name="n"/>
    <anydata name="d"/>
  </container>
  <typedef name="t2">
    <type name="union">
      <type name="empty"/>
      <type name="string"/>
    </type>
  </typedef>
  <typedef name="t3">
    <type name="union">
      <type name="string"/>
      <type name="leafref">
        <path value="/l1"/>
      </type>
    </type>
  </typedef>
  <list name="l3">
    <config value="false"/>
    <key value="e"/>
    <leaf name="e">
      <type name="empty"/>
    </leaf>
  </list>
  <typedef name="foo">
    <type name="leafref">
      <path value="/x1/y1"/>
    </type>
  </typedef>
  <leaf name="lr">
    <type name="leafref">
      <path value="/l3/e"/>
      <require-instance value="false"/>
    </type>
  </leaf>
</module>
