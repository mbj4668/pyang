<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xml:id="man.1.pyang">

  <info>
    <author>
      <personname>Martin Bj√∂rklund</personname>
      <affiliation><orgname>Tail-f Systems</orgname></affiliation>
      <email>mbj@tail-f.com</email>
      <contrib/>
    </author>
    <author>
      <personname>Ladislav Lhotka</personname>
      <affiliation><orgname>CZ.NIC</orgname></affiliation>
      <email>lhotka@nic.cz</email>
      <contrib/>
    </author>
    <author>
      <personname>Stefan Wallin</personname>
      <affiliation><orgname>Tail-f Systems</orgname></affiliation>
      <email>stefan@tail-f.com</email>
      <contrib/>
    </author>

    <date>%DATE%</date>
  </info>

  <refmeta>
    <refentrytitle>pyang</refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo class="manual">pyang manual</refmiscinfo>
    <refmiscinfo class="source">pyang-%PYANG_VERSION%</refmiscinfo>
  </refmeta>

  <refnamediv xml:id="man.1.pyang.name">
    <refname>pyang</refname>
    <refpurpose>
      validate and convert YANG modules to various formats
    </refpurpose>
  </refnamediv>

  <refsynopsisdiv xml:id="man.1.pyang.synopsis">
    <cmdsynopsis>
      <command>pyang</command>
      <arg choice="opt">--verbose</arg>
      <arg choice="opt">--canonical</arg>
      <arg choice="opt">--strict</arg>
      <arg choice="opt">--lint</arg>
      <arg choice="opt">--ietf</arg>
      <arg choice="opt">--lax-quote-checks</arg>
      <arg choice="opt">--lax-xpath-checks</arg>
      <arg choice="opt">--features <replaceable>features</replaceable></arg>
      <arg choice="opt">--exclude-features <replaceable>features</replaceable></arg>
      <arg choice="opt">--max-status <replaceable>maxstatus</replaceable></arg>
      <arg choice="opt">--hello</arg>
      <arg choice="opt">--implicit-hello-deviations</arg>
      <arg choice="opt">--check-update-from <replaceable>oldfile</replaceable></arg>
      <arg choice="opt">-o <replaceable>outfile</replaceable></arg>
      <arg choice="opt">-t <replaceable>transform</replaceable></arg>
      <arg choice="opt">-f <replaceable>format</replaceable></arg>
      <arg choice="opt">-p <replaceable>path</replaceable></arg>
      <arg choice="opt">-W <replaceable>warning</replaceable></arg>
      <arg choice="opt">-E <replaceable>error</replaceable></arg>
      <arg choice="plain" rep="repeat">
        <replaceable>file</replaceable>
      </arg>
    </cmdsynopsis>

    <cmdsynopsis>
      <command>pyang</command>
      <arg choice="opt">--sid-list</arg>
      <arg choice="plain">--sid-generate-file</arg>
      <group choice="req">
        <arg choice="plain">count</arg>
        <arg choice="plain"><replaceable>entry-point:size</replaceable></arg>
      </group>
      <arg choice="plain"><replaceable>yang-filename</replaceable></arg>
    </cmdsynopsis>

    <cmdsynopsis>
      <command>pyang</command>
      <arg choice="opt">--sid-list</arg>
      <arg choice="plain">--sid-update-file</arg>
      <arg choice="plain"><replaceable>sid-filename</replaceable></arg>
      <arg choice="plain"><replaceable>yang-filename</replaceable></arg>
      <arg choice="opt">--sid-extra-range
        <group choice="req">
          <arg choice="plain">count</arg>
          <arg choice="plain"><replaceable>entry-point:size</replaceable></arg>
        </group>
      </arg>
    </cmdsynopsis>

    <cmdsynopsis>
      <command>pyang</command>
      <arg choice="opt">--sid-list</arg>
      <arg choice="plain">--sid-check-file</arg>
      <arg choice="plain"><replaceable>sid-filename</replaceable></arg>
      <arg choice="plain"><replaceable>yang-filename</replaceable></arg>
    </cmdsynopsis>

    <cmdsynopsis>
      <command>pyang</command>
      <group choice="plain">
        <arg choice="plain">-h</arg>
        <arg choice="plain">--help</arg>
      </group>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>pyang</command>
      <group choice="plain">
        <arg choice="plain">-v</arg>
        <arg choice="plain">--version</arg>
      </group>
    </cmdsynopsis>

    <para>
      One or more <replaceable>file</replaceable> parameters may be
      given on the command line. They denote either YANG modules to be
      processed (in YANG or YIN syntax) or, using the
      <option>--hello</option> switch, a server &lt;hello&gt; message
      conforming to <link
      xlink:href="http://tools.ietf.org/html/rfc6241">RFC 6241</link>
      and <link xlink:href="http://tools.ietf.org/html/rfc6020">RFC
      6020</link>, which completely defines the data model - supported
      YANG modules as well as features and capabilities. In the latter
      case, only one <replaceable>file</replaceable> parameter may be
      present.
    </para>

    <para>
      If no files are given, <command>pyang</command> reads input
      from stdin, which must be one module or a server &lt;hello&gt; message.
    </para>
  </refsynopsisdiv>

  <refsect1 xml:id="man.1.pyang.description">
    <title>Description</title>
    <para>
      The <command>pyang</command> program is used to validate YANG
      modules (<link
      xlink:href="http://tools.ietf.org/html/rfc6020">RFC
      6020</link> and <link
      xlink:href="http://tools.ietf.org/html/rfc7950">RFC
      7950</link>).  It is also used to convert YANG modules into
      equivalent YIN modules.  From a valid module a hybrid DSDL schema (<link
      xlink:href="http://tools.ietf.org/html/rfc6110">RFC 6110</link>)
      can be generated.
    </para>

    <para>
      If no <replaceable>format</replaceable> is given, the specified
      modules are validated, and the program exits with exit code 0 if
      all modules are valid.
    </para>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.options">
    <title>Options</title>
    <variablelist remap="TP">

      <varlistentry>
        <term>
          <option>-h</option>
          <option>--help</option>
        </term>
        <listitem>
          <para>
            Print a short help text and exit.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-v</option>
          <option>--version</option>
        </term>
        <listitem>
          <para>
            Print the version number and exit.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-e</option>
          <option>--list-errors</option>
        </term>
        <listitem>
          <para>
            Print a listing of all error codes and messages pyang
            might generate, and then exit.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--print-error-code</option>
        </term>
        <listitem>
          <para>
            On errors, print the symbolic error code instead of the
            error message.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--print-error-basename</option>
        </term>
        <listitem>
          <para>
            On errors, print only the base file name independent
            of its module path location.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-Werror</option>
        </term>
        <listitem>
          <para>
            Treat warnings as errors.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-Wnone</option>
        </term>
        <listitem>
          <para>
            Do not print any warnings.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-W</option>
          <replaceable>errorcode</replaceable>
        </term>
        <listitem>
          <para>
            Treat <replaceable>errorcode</replaceable> as a warning,
            even if <option>-Werror</option> is given.
            <replaceable>errorcode</replaceable> must be a warning or
            a minor error.
          </para>
          <para>
            Use <option>--list-errors</option> to get a listing of all
            errors and warnings.
          </para>
          <para>
            The following example treats all warnings except the
            warning for unused imports as errors:
          </para>
          <informalexample>
            <screen>$ pyang --Werror -W UNUSED_IMPORT</screen>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-E</option>
          <replaceable>errorcode</replaceable>
        </term>
        <listitem>
          <para>
            Treat the warning <replaceable>errorcode</replaceable> as
            an error.
          </para>
          <para>
            Use <option>--list-errors</option> to get a listing of all
            errors and warnings.
          </para>
          <para>
            The following example treats only the warning for unused
            import as an error:
          </para>
          <informalexample>
            <screen>$ pyang --Werror -W UNUSED_IMPORT</screen>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--ignore-error</option>
          <replaceable>errorcode</replaceable>
        </term>
        <listitem>
          <para>
            Ignore error <replaceable>errorcode</replaceable>.
          </para>
          <para>
            Use with care.  Plugins that don't expect to be invoked if
            there are errors present may crash.
          </para>
          <para>
            Use <option>--list-errors</option> to get a listing of all
            errors and warnings.
          </para>
          <para>
            The following example ignores syntax errors in patterns:
          </para>
          <informalexample>
            <screen>$ pyang --ignore-error PATTERN_ERROR</screen>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--msg-template</option>
          <replaceable>msg-template</replaceable>
        </term>
        <listitem>
          <para>
            Print out error message in defined <replaceable>msg-template</replaceable>.
          </para>
          <para>
            Template used to display error messages. This is a python
            new-style format string used to format the message
            information with keys file, line, code, type, and msg.
          </para>
          <para>
            The following example create a msg template in defined pattern:
          </para>
          <informalexample>
            <screen>$ pyang --msg-template='{file} || {line} || {type} || {level} || {code} || {msg}'</screen>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--ignore-errors</option>
        </term>
        <listitem>
          <para>
            Ignore all errors.  Use with care.  Plugins that don't expect
            to be invoked if there are errors present may crash.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--keep-comments</option>
        </term>
        <listitem>
          <para>
            This parameter has effect only if a plugin can handle
            comments.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--canonical</option>
        </term>
        <listitem>
          <para>
            Validate the module(s) according to the canonical YANG order.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--verify-revision-history</option>
        </term>
        <listitem>
          <para>
            Ensure that the revision history in the given module(s) is
            correct, by checking that it can find the old revisions of
            the module(s) in the YANG module search path.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--strict</option>
        </term>
        <listitem>
          <para>
            Force strict YANG compliance.  Currently this checks
            that the deref() function is not used in XPath expressions
            and leafrefs.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--lint</option>
        </term>
        <listitem>
          <para>
            Validate the module(s) according to the generic YANG guideline as
            specified in <link
            xlink:href="http://tools.ietf.org/html/rfc8407">RFC
            8407</link>.  In addition, it checks that the module is in
            canonical order.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--ietf</option>
        </term>
        <listitem>
          <para>
            Validate the module(s) like <option>--lint</option>, and
            in addition verifies that the namespace and module name
            follow the IETF conventions, and that the module has the
            correct license text and <link
            xlink:href="http://tools.ietf.org/html/rfc2119">RFC
            2119</link> / <link
            xlink:href="http://tools.ietf.org/html/rfc8174">RFC
            8174</link> boilerplate text.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--lax-quote-checks</option>
        </term>
        <listitem>
          <para>
            Lax checks of backslashes in double quoted strings in YANG
            version 1 modules. <link
            xlink:href="http://tools.ietf.org/html/rfc6020">RFC
            6020</link> does not clearly define how to handle
            backslahes within double quoted strings, when the
            character after the backslash is not one of the characters
            listed in Section 6.1.3 in <link
            xlink:href="http://tools.ietf.org/html/rfc6020">RFC
            6020</link>.
          </para>
          <para>
            Earlier versions of pyang silently accepted such escape
            sequences, but the current version treats this as an
            error, just like it is defined in YANG 1.1 (<link
            xlink:href="http://tools.ietf.org/html/rfc7950">RFC
            7950</link>).  Passing this flag to pyang makes pyang
            silently accept such escape sequences.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--lax-xpath-checks</option>
        </term>
        <listitem>
          <para>
            Lax checks of XPath expressions.  Specifically, do not
            generate an error if an XPath expression uses a variable
            or an unknown function.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-L</option>
          <option>--hello</option>
        </term>
        <listitem>
          <para>
            Interpret the input file or standard input as a server
            &lt;hello&gt; message. In this case, no more than one
            <replaceable>file</replaceable> parameter may be given.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--implicit-hello-deviations</option>
        </term>
        <listitem>
          <para>
            Attempt to parse all deviations from a supplied &lt;hello&gt;
            message. Not all implementations provide deviations explicitly
            as modules. This flag enables more logic to attempt to derive
            all deviations from the message.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--trim-yin</option>
        </term>
        <listitem>
          <para>
            In YIN input modules, remove leading and trailing
            whitespace from every line in the arguments of the
            following statements: 'contact', 'description',
            'error-message', 'organization' and 'reference'. This way,
            the XML-indented argument texts look tidy after
            translating the module to the compact YANG syntax.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--max-line-length</option>
          <replaceable>maxlen</replaceable>
        </term>
        <listitem>
          <para>
            Give a warning if any line is longer than
            <replaceable>maxlen</replaceable>.  The value 0 means no
            check (default).
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--max-identifier-length</option>
          <replaceable>maxlen</replaceable>
        </term>
        <listitem>
          <para>
            Give a error if any identifier is longer than
            <replaceable>maxlen</replaceable>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-t</option>
          <option>--transform</option>
          <replaceable>transform</replaceable>
        </term>
        <listitem>
          <para>
            Transform the module(s) after parsing them but before outputting
            them.  Multiple transformations can be given, and will be performed
            in the order that they were specified. The supported
            transformations are listed in <xref
            linkend="man.1.pyang.transformations"
            endterm="man.1.pyang.transformations_title"/> below.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-f</option>
          <option>--format</option>
          <replaceable>format</replaceable>
        </term>
        <listitem>
          <para>
            Convert the module(s) into
            <replaceable>format</replaceable>.  Some translators
            require a single module, and some can translate multiple
            modules at one time.  If no
            <replaceable>outfile</replaceable> file is specified, the
            result is printed on stdout.  The supported formats are
            listed in <xref linkend="man.1.pyang.output_formats"
            endterm="man.1.pyang.output_formats_title"/> below.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-o</option>
          <option>--output</option>
          <replaceable>outfile</replaceable>
        </term>
        <listitem>
          <para>
            Write the output to the file
            <replaceable>outfile</replaceable> instead of stdout.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-F</option>
          <option>--features</option>
          <replaceable>features</replaceable>
        </term>
        <listitem>
          <para>
            <replaceable>features</replaceable> is a string of the
            form
            <replaceable>modulename</replaceable>:[<replaceable>feature</replaceable>(,<replaceable>feature</replaceable>)*]
          </para>
          <para>
            This option is used to prune the data model by removing
            all nodes that are defined with a "if-feature" that is
            not listed as <replaceable>feature</replaceable>.  This option
            affects all output formats.
          </para>
          <para>
            This option can be given multiple times, and may also be combined
            with <option>--hello</option>. The <option>--features</option>
            option overrides any supported features for a module that are taken
            from the hello file.
          </para>
          <para>
            If this option is not given, nothing is pruned, i.e., it works
            as if all features were explicitly listed.
          </para>
          <para>
            The <option>--exclude-features</option> option can be used for
            excluding a list of named features. <option>--features</option> and
            <option>--exclude-features</option> can't both be specified for a
            given module.
          </para>
          <para>
            For example, to view the tree output for a module with all
            if-feature'd nodes removed, do:
          </para>
          <informalexample>
            <screen>$ pyang -f tree --features mymod: mymod.yang</screen>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-X</option>
          <option>--exclude-features</option>
          <replaceable>features</replaceable>
        </term>
        <listitem>
          <para>
            <replaceable>features</replaceable> is a string of the
            form
            <replaceable>modulename</replaceable>:[<replaceable>feature</replaceable>(,<replaceable>feature</replaceable>)*]
          </para>
          <para>
            This option is used to prune the data model by removing
            all nodes that are defined with a "if-feature" that is
            listed as <replaceable>feature</replaceable>.  This option
            affects all output formats.
          </para>
          <para>
            This option can be given multiple times. It can't be combined with
            <option>--hello</option>.
          </para>
          <para>
            The <option>--features</option> option can be used for including
            all features or a list of named
            features. <option>--features</option> and
            <option>--exclude-features</option> can't both be specified for a
            given module.
          </para>
          <para>
            For example, to view the tree output for a module with
            if-feature'd nodes for the specified feature removed, do:
          </para>
          <informalexample>
            <screen>$ pyang -f tree --exclude-features mymod:myfeat mymod.yang</screen>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--max-status</option>
          <replaceable>maxstatus</replaceable>
        </term>
        <listitem>
          <para>
            <replaceable>maxstatus</replaceable> is one of:
            <replaceable>current</replaceable>,
            <replaceable>deprecated</replaceable>, or
            <replaceable>obsolete</replaceable>.
          </para>
          <para>
            This option is used to prune the data model by removing
            all nodes that are defined with a "status" that is less
            than the given <replaceable>maxstatus</replaceable>.  This
            option affects all output formats.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--deviation-module</option>
          <replaceable>file</replaceable>
        </term>
        <listitem>
          <para>
            This option is used to apply the deviations defined in
            <replaceable>file</replaceable>.  This option
            affects all output formats.
          </para>
          <para>
            This option can be given multiple times.
          </para>
          <para>
            For example, to view the tree output for a module with some
            deviations applied, do:
          </para>
          <informalexample>
            <screen>$ pyang -f tree --deviation-module mymod-devs.yang mymod.yang</screen>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-p</option>
          <option>--path</option>
          <replaceable>path</replaceable>
        </term>
        <listitem>
          <para>
            <replaceable>path</replaceable> is a colon (:) separated
            list of directories to search for imported modules.  This
            option may be given multiple times.
          </para>
          <para>
            By default, all directories (except ".") found in the path
            are recursively scanned for modules.  This behavior can be
            disabled by giving the option <option>--no-path-recurse</option>.
          </para>
          <para>
            The following directories are always added to the search path:
          </para>
          <orderedlist numeration="arabic" spacing="compact">
            <listitem>
              <para>
                current directory
              </para>
            </listitem>
            <listitem>
              <para>
                <envar>$YANG_MODPATH</envar>
              </para>
            </listitem>
            <listitem>
              <para>
                <envar>$HOME</envar><filename>/yang/modules</filename>
              </para>
            </listitem>
            <listitem>
              <para>
                <envar>$YANG_INSTALL</envar><filename>/yang/modules</filename>
                OR if <envar>$YANG_INSTALL</envar> is unset
                <filename>&lt;the default installation
                directory&gt;/yang/modules</filename> (on Unix
                systems: <filename>/usr/share/yang/modules</filename>)
              </para>
            </listitem>
          </orderedlist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--no-path-recurse</option>
        </term>
        <listitem>
          <para>
            If this parameter is given, directories in the search path
            are not recursively scanned for modules.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--plugindir</option>
          <replaceable>plugindir</replaceable>
        </term>
        <listitem>
          <para>
            Load all YANG plugins found in the directory
            <emphasis>plugindir</emphasis>.  This option may be given
            multiple times.
          </para>
          <para>
            list of directories to search for pyang plugins.  The
            following directories are always added to the search
            path:
          </para>
          <orderedlist numeration="arabic">
            <listitem>
              <para>
                <filename>pyang/plugins</filename> from
                where pyang is installed
              </para>
            </listitem>
            <listitem>
              <para>
                <envar>$PYANG_PLUGINPATH</envar>
              </para>
            </listitem>
          </orderedlist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--check-update-from</option>
          <replaceable>oldfile</replaceable>
        </term>
        <listitem>
          <para>
            Checks that a new revision of a module follows the update
            rules given in <link
            xlink:href="http://tools.ietf.org/html/rfc6020">RFC
            6020</link> and <link
            xlink:href="http://tools.ietf.org/html/rfc7950">RFC
            7950</link>.  <emphasis>oldfile</emphasis> is the old
            module and <emphasis>file</emphasis> is the new version of
            the module.
          </para>
          <para>
            If the old module imports or includes any modules or
            submodules, it is important that the the old versions of
            these modules and submodules are found.  By default, the
            directory where <emphasis>oldfile</emphasis> is found is
            used as the only directory in the search path for old
            modules.  Use the option
            <option>--check-update-from-path</option> to control this
            path.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-P</option>
          <option>--check-update-from-path</option>
          <replaceable>oldpath</replaceable>
        </term>
        <listitem>
          <para>
            <replaceable>oldpath</replaceable> is a colon (:) separated
            list of directories to search for imported modules.  This
            option may be given multiple times.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-D</option>
          <option>--check-update-from-deviation-module</option>
          <replaceable>olddeviation</replaceable>
        </term>
        <listitem>
          <para>
            <emphasis>olddeviation</emphasis> is an old deviation module
            of the old module <emphasis>oldfile</emphasis>. This option
            may be given multiple times. For example, to check updates of
            a module with some deviations applied, do:
          </para>
          <informalexample>
            <screen>$ pyang --check-update-from-deviation-module oldmod-devs.yang --check-update-from oldmod.yang \
  --deviation-module newmod-devs.yang newmod.yang</screen>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <replaceable>file...</replaceable>
        </term>
        <listitem>
          <para>
            These are the names of the files containing the modules to
            be validated, or the module to be converted.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>


  <refsect1 xml:id="man.1.pyang.transformations">
    <title xml:id="man.1.pyang.transformations_title">
      Transformations
    </title>

    <para>
      Installed <command>pyang</command> transformations are (like output formats) plugins and
      therefore may define their own options, or add new transformations to the <option>-t</option>
      option. These options and transformations are listed in <userinput>pyang -h</userinput>.
    </para>

    <variablelist>
      <varlistentry>
        <term><emphasis>edit</emphasis></term>
        <listitem>
          <para>
            Modify the supplied module(s) in various ways. This transform will usually be used
            with the <emphasis>yang</emphasis> output format.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.edit_transform">
    <title>Edit Transform</title>
    <para>
      The <emphasis>edit</emphasis> transform modifies the supplied module(s) in various ways.
      It can, for example, replace top-level <emphasis>description</emphasis> statements, update
      <emphasis>include</emphasis> statements and manage <emphasis>revision</emphasis> statements.
      Unless otherwise noted below, it only modifies <emphasis>existing</emphasis>
      statements.
    </para>
    <para>
      Each <emphasis>edit</emphasis> transform string (non-date) option value is either a plain
      string (which is taken literally) or a <emphasis>+</emphasis>-separated list of directives
      (whose expansions are concatenated with double-linebreak separators, i.e. each directive
      results in one or more paragraphs).
    </para>
    <para>
      Each directive is either of the form <emphasis>@filename</emphasis> (which is replaced
      with the contents of the file; there is no search path; trailing whitespace is discarded) or
      of the form <emphasis>%keyword</emphasis>. Any unrecognized directives are treated as plain
      strings. The following <emphasis>%</emphasis>-directives are currently supported:<itemizedlist>
        <listitem>
          <para>
            <emphasis>%SUMMARY</emphasis> : This expands to a "summary" of the original argument
            value. It's intended for use with top-level <emphasis>description</emphasis> statements
            that typically consist of a hand-crafted summary followed by copyrights, license and
            other boiler-plate text. The summary is the text up to but not including the first line
            that (ignoring leading and trailing whitespace) starts with the word
              <emphasis>Copyright</emphasis> followed by a space.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>%SUBST/old/new</emphasis> : This expands to the original argument value
            with all instances of <emphasis>old</emphasis> replaced with <emphasis>new</emphasis>.
            There is no provision for replacing characters that contain forward slashes, and there
            is no terminating slash.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>%DELETE</emphasis> : This clears the output buffer and suppresses a check
            that would normally prevent overwriting an existing value (unless that value is the
            literal string <command>TBD</command>).
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      In the examples given below, it's assumed that there are <emphasis>CONTACT</emphasis>,
      <emphasis>CONTEXT</emphasis>, <emphasis>LICENSE</emphasis>,
      <emphasis>ORGANIZATION</emphasis>, <emphasis>REFERENCE</emphasis> and
      <emphasis>REVISION</emphasis> files in a top-level project directory (which in this case is
      the parent of the directory in which <command>pyang</command> is being run). These examples
      illustrate how the <emphasis>edit</emphasis> transform might be used with the
      <emphasis>yang</emphasis> output format to prepare YANG files for publication.
    </para>
    <para>
      Edit transform specific options:
    </para>
    <variablelist>
      <varlistentry>
        <term>
          <option>--edit-yang-version</option>
          <replaceable>version</replaceable>
        </term>
        <listitem>
          <para>
            Set the YANG version (i.e., the <emphasis>yang-version</emphasis> statement's
            argument) to <replaceable>version</replaceable>. This does nothing if the YANG module
            doesn't already have a <emphasis>yang-version</emphasis> statement.
          </para>
          <para>
            Example: <command>--edit-yang-version 1.1</command>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--edit-namespace</option>
          <replaceable>namespace</replaceable>
        </term>
        <listitem>
          <para>
            Set the YANG namespace (i.e., the <emphasis>namespace</emphasis> statement's
            argument) to <replaceable>namespace</replaceable>. This does nothing if the YANG module
            doesn't already have a <emphasis>namespace</emphasis> statement.
          </para>
          <para>
            Example: <command>--edit-namespace %SUBST/acme-pacific-org/apo</command>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--edit-update-import-dates</option>
        </term>
        <listitem>
          <para>
            Update any <emphasis>import</emphasis> (or <emphasis>include</emphasis>)
            <emphasis>revision-date</emphasis> statements to match imported (or included) modules
            and submodules. If there isn't already a <emphasis>revision-date</emphasis> statement,
            it will be added.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--edit-delete-import-dates</option></term>
        <listitem>
          <para>
            Delete any <replaceable>import</replaceable> (or <emphasis>include</emphasis>)
            <emphasis>revision-date</emphasis> statements.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--edit-organization</option>
          <replaceable>organization</replaceable>
        </term>
        <listitem>
          <para>
            Set the organization (i.e. the <emphasis>organization</emphasis> statement's
            argument) to <replaceable>organization</replaceable>. This does nothing if the YANG
            module doesn't already have an <emphasis>organization</emphasis> statement.
          </para>
          <para>
            Example: <command>--edit-organization @../ORGANIZATION</command>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--edit-contact</option>
          <replaceable>contact</replaceable>
        </term>
        <listitem>
          <para>
            Set the contact info (i.e. the <emphasis>contact</emphasis> statement's argument) to
              <replaceable>contact</replaceable>. This does nothing if the YANG module doesn't
            already have a <emphasis>contact</emphasis> statement.
          </para>
          <para>
            Example: <command>--edit-contact @../CONTACT</command>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--edit-description</option>
          <replaceable>description</replaceable>
        </term>
        <listitem>
          <para>
            Set the top-level description (i.e. the top-level <emphasis>description</emphasis>
            statement's argument) to <replaceable>description</replaceable>. This does nothing if
            the YANG module doesn't already have a <emphasis>description</emphasis>
            statement.
          </para>
          <para>
            Example: <command>--edit-description %SUMMARY+@../LICENSE+@../CONTEXT</command>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--edit-delete-revisions-after</option>
          <replaceable>prevdate</replaceable>
        </term>
        <listitem>
          <para>
            Delete any <replaceable>revision</replaceable> statements after (i.e. that are more
            recent than) the supplied <emphasis>yyyy-mm-dd</emphasis> revision date. A typical use
            case is to supply the date of the previous release: any revisions since then will be
            internal (e.g. developers often feel that they should add revision statements for git
            commits) and are not wanted in the next released version.
          </para>
          <para>
            Example: <command>--edit-delete-revisions-after 2019-03-15</command>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--edit-revision-date</option>
          <replaceable>date</replaceable>
        </term>
        <listitem>
          <para>
            Set the most recent revision date to the supplied
            <replaceable>yyyy-mm-dd</replaceable> revision date. This does nothing if the YANG
            module doesn't already have at least one <emphasis>revision</emphasis> statement. If
            necessary, a new <emphasis>revision</emphasis> statement will be inserted before any
            (remaining) existing revisions.
          </para>
          <para>
            Example: <command>--edit-revision-date 2020-03-15</command>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--edit-revision-description</option>
          <replaceable>description</replaceable>
        </term>
        <listitem>
          <para>
            Set the most recent revision description to <replaceable>description</replaceable>.
          </para>
          <para>
            Example: <command>--edit-revision-description=%DELETE+@../REVISION</command>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--edit-revision-reference</option>
          <replaceable>reference</replaceable>
        </term>
        <listitem>
          <para>
            Set the most recent revision reference to <replaceable>reference</replaceable>.
          </para>
          <para>
            Example: <command>--edit-revision-reference=%DELETE+@../REFERENCE</command>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>


  <refsect1 xml:id="man.1.pyang.output_formats">
    <title xml:id="man.1.pyang.output_formats_title">
      Output Formats
    </title>

    <para>
      Installed <command>pyang</command> plugins may define their own
      options, or add new formats to the <option>-f</option> option.
      These options and formats are listed in <userinput>pyang -h</userinput>.
    </para>

    <variablelist>
      <varlistentry>
        <term><emphasis>capability</emphasis></term>
        <listitem>
          <para>Capability URIs for each module of the data model.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>depend</emphasis></term>
        <listitem>
          <para>Makefile dependency rule for the module.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>dsdl</emphasis></term>
        <listitem>
          <para>Hybrid DSDL schema, see <link
          xlink:href="http://tools.ietf.org/html/rfc6110">RFC
          6110</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>identifiers</emphasis></term>
        <listitem>
          <para>All identifiers in the module.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>jsonxsl</emphasis></term>
        <listitem>
          <para>XSLT stylesheet for transforming XML instance
          documents to JSON.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>jstree</emphasis></term>
        <listitem>
          <para>HTML/JavaScript tree navigator.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>jtox</emphasis></term>
        <listitem>
          <para>Driver file for transforming JSON
          instance documents to XML.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>name</emphasis></term>
        <listitem>
          <para>Module name, and the name of the main module for a
          submodule.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>omni</emphasis></term>
        <listitem>
          <para>An applescript file that draws a diagram in
          <command>OmniGraffle</command>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>sample-xml-skeleton</emphasis></term>
        <listitem>
          <para>Skeleton of a sample XML instance document.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>tree</emphasis></term>
        <listitem>
          <para>Tree structure of the module.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>flatten</emphasis></term>
        <listitem>
          <para>Print the schema nodes in CSV form.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>uml</emphasis></term>
        <listitem>
          <para>UML file that can be read by
          <command>plantuml</command> to generate UML diagrams.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>yang</emphasis></term>
        <listitem>
          <para>Normal YANG syntax.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>yin</emphasis></term>
        <listitem>
          <para>The XML syntax of YANG.</para>
        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1>

  <refsect1 xml:id="man.1.pyang.lint_options">
    <title>Lint Checker</title>
    <para>
      The <emphasis>lint</emphasis> option validates that the module
      follows the generic conventions and rules given in <link
      xlink:href="http://tools.ietf.org/html/rfc8407">RFC 8407</link>.
      In addition, it checks that the module is in canonical order.
    </para>
    <para>
      Options for the <emphasis>lint</emphasis> checker:
    </para>

    <variablelist>
      <varlistentry>
        <term>
          <option>--lint-namespace-prefix</option>
          <replaceable>prefix</replaceable>
        </term>
        <listitem>
          <para>
            Validate that the module's namespace is of the form:
            "&lt;prefix&gt;&lt;modulename&gt;".
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <option>--lint-modulename-prefix</option>
          <replaceable>prefix</replaceable>
        </term>
        <listitem>
          <para>
            Validate that the module's name starts with
            <replaceable>prefix</replaceable>.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <option>--lint-ensure-hyphenated-names</option>
        </term>
        <listitem>
          <para>
            Validate that all identifiers use hyphenated style, i.e.,
            no uppercase letters or underscores.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.sid_options">
    <title>YANG Schema Item iDentifiers (SID)</title>
    <para>
      YANG Schema Item iDentifiers (SID) are globally unique unsigned integers
      used to identify YANG items. SIDs are used instead of names to save space
      in constrained applications such as COREconf. This plugin is used to
      automatically generate and updated .sid files used to persist and
      distribute SID assignments.
    </para>
    <para>
      Options for generating, updating and checking .sid files:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--sid-generate-file</option></term>
        <listitem>
          <para>
            This option is used to generate a new .sid file from a YANG module.
          </para>
          <para>
            Two arguments are required to generate a .sid file; the SID range assigned
            to the YANG module and its definition file. The SID range specified is a
            sub-range within a range obtained from a registrar or a sub-range within
            the experimental range (i.e. 60000 to 99999). The SID range consists of
            the first SID of the range, followed by a colon, followed by the number
            of SID allocated to the YANG module. The filename consists of the module
            name, followed by an @ symbol, followed by the module revision, followed
            by the ".yang" extension.
          </para>
          <para>
            This example shows how to generate the file
            <emphasis>toaster@2009-11-20.sid</emphasis>.
          </para>
          <informalexample>
            <screen>$ pyang --sid-generate-file 20000:100 toaster@2009-11-20.yang</screen>
          </informalexample>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--sid-update-file</option></term>
        <listitem>
          <para>
            Each time new items are added to a YANG module by the introduction of
            a new revision of this module, its included sub-modules or imported
            modules, the associated .sid file need to be updated. This is done
            by using the <option>--sid-update-file</option> option.
          </para>
          <para>
            Two arguments are required to generate a .sid file for an updated YANG
            module; the previous .sid file generated for the YANG module and the
            definition file of the updated module. Both filenames follow the usual
            naming conversion consisting of the module name, followed by an @ symbol,
            followed by the module revision, followed by the extension.
          </para>
          <para>
            This example shows how to generate the file
            <emphasis>toaster@2009-12-28.sid</emphasis> based on the SIDs already
            present in <emphasis>toaster@2009-11-20.sid</emphasis>.
          </para>
          <informalexample>
            <screen>$ pyang --sid-update-file toaster@2009-11-20.sid \
toaster@2009-12-28.yang</screen>
          </informalexample>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--sid-check-file</option></term>
        <listitem>
          <para>
            The <option>--sid-check-file</option> option can be used at any time
            to verify if a .sid file need to be updated.
          </para>
          <para>
            Two arguments are required to verify a .sid file; the filename of the .sid file
            to be checked and the corresponding definition file.
          </para>
          <para>
            For example:
          </para>
          <informalexample>
            <screen>$ pyang --sid-check-file toaster@2009-12-28.sid \
toaster@2009-12-28.yang</screen>
          </informalexample>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--sid-list</option></term>
        <listitem>
          <para>
            The <option>--sid-list</option> option can be used before any of the
            previous options to obtains the list of SIDs assigned or validated. For example:
          </para>
          <informalexample>
            <screen>$ pyang --sid-list --sid-generate-file 20000:100 \
toaster@2009-11-20.yang</screen>
          </informalexample>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--sid-extra-range</option></term>
        <listitem>
          <para>
            If needed, an extra SID range can be assigned to an existing YANG module
            during its update with the <option>--sid-extra-range</option> option.
          </para>
          <para>
            For example, this command generates the file <emphasis>toaster@2009-12-28.sid</emphasis>
            using the initial range(s) present in <emphasis>toaster@2009-11-20.sid</emphasis>
            and the extra range specified in the command line.
          </para>
          <informalexample>
            <screen>$ pyang --sid-update-file toaster@2009-11-20.sid \
toaster@2009-12-28.yang --sid-extra-range 20100:100</screen>
          </informalexample>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>count</emphasis></term>
        <listitem>
          <para>
            The number of SID required when generating or updating a .sid file can
            be computed by specifying "<emphasis>count</emphasis>" as SID range.
          </para>
          <para>
            For example:
          </para>
          <informalexample>
            <screen>$ pyang --sid-generate-file count toaster@2009-11-20.yang</screen>
          </informalexample>
          <para>
            or:
          </para>
          <informalexample>
            <screen>$ pyang --sid-update-file toaster@2009-11-20.sid \
toaster@2009-12-28.yang --sid-extra-range count</screen>
          </informalexample>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.capability_output">
    <title>Capability Output</title>
    <para>The <emphasis>capability</emphasis> output prints a
    capability URL for each module of the input data model, taking
    into account features and deviations, as described in section
    5.6.4 of <link
    xlink:href="http://tools.ietf.org/html/rfc6020">RFC 6020</link>.</para>
    <para>
      Options for the <emphasis>capability</emphasis> output format:
    </para>

    <variablelist>
      <varlistentry>
        <term><option>--capability-entity</option></term>
        <listitem>
          <para>
            Write ampersands in the output as XML entities ("&amp;amp;").
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.depend_output">
    <title>Depend Output</title>
    <para>
      The <emphasis>depend</emphasis> output generates a Makefile
      dependency rule for files based on a YANG module.  This is
      useful if files are generated from the module.  For example,
      suppose a .c file is generated from each YANG module.  If the
      YANG module imports other modules, or includes submodules, the
      .c file needs to be regenerated if any of the imported or
      included modules change.  Such a dependency rule can be
      generated like this:
    </para>

    <informalexample>
      <screen>$ pyang -f depend --depend-target mymod.c \
      --depend-extension .yang mymod.yang
      mymod.c : ietf-yang-types.yang my-types.yang</screen>
    </informalexample>

    <para>
      Options for the <emphasis>depend</emphasis> output format:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--depend-target</option></term>
        <listitem>
          <para>
            Makefile rule target.  Default is the module name.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--depend-extension</option></term>
        <listitem>
          <para>
            YANG module file name extension.  Default is no extension.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--depend-no-submodules</option></term>
        <listitem>
          <para>
            Do not generate dependencies for included submodules.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--depend-from-submodules</option></term>
        <listitem>
          <para>
            Generate dependencies taken from all included submodules.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--depend-recurse</option></term>
        <listitem>
          <para>
            Recurse into imported modules and generate dependencies
            for their imported modules etc.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--depend-include-path</option></term>
        <listitem>
          <para>
            Include file path in the prerequisites.  Note that if no
            <option>--depend-extension</option> has been given, the
            prerequisite is the filename as found, i.e., ending in
            ".yang" or ".yin".
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--depend-ignore-module</option></term>
        <listitem>
          <para>
            Name of YANG module or submodule to ignore in the
            prerequisites.  This option can be given multiple times.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.dsdl_output">
    <title>DSDL Output</title>
     <para>The <emphasis>dsdl</emphasis> output takes a data model
     consisting of one or more YANG modules and generates a hybrid
     DSDL schema as described in <link
     xlink:href="http://tools.ietf.org/html/rfc6110">RFC
     6110</link>. The hybrid schema is primarily intended as an
     interim product used by <command>yang2dsdl</command>(1).</para>
     <para>The <emphasis>dsdl</emphasis> plugin also supports metadata
     annotations, if they are defined and used as described in <link
     xlink:href="http://tools.ietf.org/html/rfc7952">RFC
     7952</link>.</para>
    <para>
      Options for the <emphasis>dsdl</emphasis> output format:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--dsdl-no-documentation</option></term>
        <listitem>
          <para>
            Do not print documentation annotations
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--dsdl-no-dublin-core</option></term>
        <listitem>
          <para>
            Do not print Dublin Core metadata terms
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--dsdl-record-defs</option></term>
        <listitem>
          <para>
            Record translations of all top-level typedefs and
            groupings in the output schema, even if they are not
            used. This is useful for translating library modules.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>


  <refsect1 xml:id="man.1.pyang.jsonxsl_output">
    <title>JSONXSL Output</title>
    <para>
      The <emphasis>jsonxsl</emphasis> output generates an XSLT 1.0
      stylesheet that can be used for transforming an XML instance
      document into JSON text as specified in <link
      xlink:href="http://tools.ietf.org/html/rfc7951">RFC
      7951</link>. The XML document must be a valid instance of the
      data model which is specified as one or more input YANG modules
      on the command line (or via a &lt;hello&gt; message, see the
      <option>--hello</option> option).
    </para>
     <para>The <emphasis>jsonxsl</emphasis> plugin also converts
     metadata annotations, if they are defined and used as described
     in <link xlink:href="http://tools.ietf.org/html/rfc7952">RFC
     7952</link>.</para>
    <para>
      The data tree(s) must be wrapped at least in either
      &lt;nc:data&gt; or &lt;nc:config&gt; element, where "nc" is the
      namespace prefix for the standard NETCONF URI
      "urn:ietf:params:xml:ns:netconf:base:1.0", or the XML instance
      document has to be a complete NETCONF RPC request/reply or
      notification. Translation of RPCs and notifications defined by
      the data model is also supported.
    </para>
    <para>
      The generated stylesheet accepts the following parameters that
      modify its behaviour:
    </para>
    <itemizedlist>
      <listitem>
        <para><emphasis>compact</emphasis>: setting this parameter to
        1 results in a compact representation of the JSON text,
        i.e. without any whitespace. The default is 0 which means that
        the JSON output is pretty-printed.</para>
      </listitem>
      <listitem>
        <para><emphasis>ind-step</emphasis>: indentation step,
        i.e. the number of spaces to use for each level. The default
        value is 2 spaces. Note that this setting is only useful for
        pretty-printed output (compact=0).</para>
      </listitem>
    </itemizedlist>
    <para>
      The stylesheet also includes the file
      <filename>jsonxsl-templates.xsl</filename> which is a part of
      <command>pyang</command> distribution.
    </para>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.jstree">
    <title>jstree Output</title>
    <para>
      The <emphasis>jstree</emphasis> output grenerates an
      HTML/JavaScript page that presents a tree-navigator to the given
      YANG module(s).
    </para>
    <para>
      jstree output specific option:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--jstree-no-path</option></term>
        <listitem>
          <para>
            Do not include paths in the output.  This option makes the
            page less wide.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.jtox_output">
    <title>JTOX Output</title>
    <para>
      The <emphasis>jtox</emphasis> output generates a driver file
      which can be used as one of the inputs to
      <command>json2xml</command> for transforming a JSON document
      to XML as specified in <link
     xlink:href="http://tools.ietf.org/html/rfc7951">RFC
     7951</link>.
    </para>
    <para>
      The <emphasis>jtox</emphasis> output itself is a JSON document
      containing a concise representation of the data model which is
      specified as one or more input YANG modules on the command line
      (or via a &lt;hello&gt; message, see the
      <option>--hello</option> option).
    </para>
    <para>
      See <command>json2xml</command> manual page for more information.
    </para>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.omni_output">
    <title>Omni Output</title>
    <para>
      The plugin generates an
      applescript file that draws a diagram in OmniGraffle.  Requires
      OmniGraffle 6.  Usage:
      <informalexample>
        <screen>$ pyang -f omni foo.yang -o foo.scpt
$ osascript foo.scpt</screen>
      </informalexample>
    </para>
    <para>
      omni output specific option:
    </para>
    <variablelist>
      <varlistentry>
        <term>
          <option>--omni-path</option>
          <replaceable>path</replaceable>
        </term>
        <listitem>
          <para>
            Subtree to print.  The <replaceable>path</replaceable> is
            a slash ("/") separated path to a subtree to print.  For
            example "/nacm/groups".
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.name_output">
    <title>Name Output</title>
    <para>The <emphasis>name</emphasis> output prints the name of each
    module in the input data model. For submodules, it also shows the
    name of the main module to which the submodule belongs.</para>
    <para>
	name output specific option:
    </para>
    <variablelist>
	<varlistentry>
	    <term>
		<option>--name-print-revision</option>
	    </term>
	    <listitem>
		<para>
		    Print the name and revision in name@revision format.
		</para>
	    </listitem>
	</varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.sample-xml-skeleton_output">
    <title>Sample-xml-skeleton Output</title>
    <para>
      The <emphasis>sample-xml-skeleton</emphasis> output generates an
      XML instance document with sample elements for all nodes in the
      data model, according to the following rules:
    </para>
    <itemizedlist>
      <listitem>
        <para>An element is present for every leaf, container or anyxml.</para>
      </listitem>
      <listitem>
        <para>At least one element is present for every leaf-list or
        list. The number of entries in the sample is min(1,
        min-elements).</para>
      </listitem>
      <listitem>
        <para>For a choice node, sample element(s) are present for
        each case.</para>
      </listitem>
      <listitem>
        <para>Leaf, leaf-list and anyxml elements are empty (but see
        the <option>--sample-xml-skeleton-defaults</option> option
        below).</para>
      </listitem>
    </itemizedlist>
    <para>Note that the output document will most likely be invalid
    and needs manual editing.</para>
    <para>
      Options specific to the <emphasis>sample-xml-skeleton</emphasis> output
      format:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--sample-xml-skeleton-annotations</option></term>
        <listitem>
          <para>
            Add XML comments to the sample documents with hints about
            expected contents, for example types of leaf nodes,
            permitted number of list entries etc.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--sample-xml-skeleton-defaults</option></term>
        <listitem>
          <para>
            Add leaf elements with defined defaults to the output with
            their default value. Without this option, the default
            elements are omitted.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--sample-xml-skeleton-doctype=<replaceable>type</replaceable></option>
        </term>
        <listitem>
          <para>
            Type of the sample XML document. Supported values for
            <replaceable>type</replaceable> are
            <literal>data</literal> (default) and
            <literal>config</literal>. This option determines the
            document element of the output XML document (&lt;data&gt;
            or &lt;config&gt; in the NETCONF namespace) and also affects the contents: for
            <literal>config</literal>, only data nodes representing
            configuration are included.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--sample-xml-skeleton-path=<replaceable>path</replaceable></option>
        </term>
        <listitem>
          <para>
            Subtree of the sample XML document to generate, including
            all ancestor elements.  The
            <replaceable>path</replaceable> is a slash ("/") separated
            list of data node names that specifies the path to a subtree to
            print. For example "/nacm/rule-list/rule/rpc-name".
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.tree_output">
    <title>Tree Output</title>
    <para>
      The <emphasis>tree</emphasis> output prints the resulting schema
      tree from one or more modules.  Use <userinput>pyang
      --tree-help</userinput> to print a description on the symbols
      used by this format.
    </para>
    <para>
      Tree output specific options:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--tree-help</option></term>
        <listitem>
          <para>
            Print help on symbols used in the tree output and exit.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--tree-depth</option>
          <replaceable>depth</replaceable>
        </term>
        <listitem>
          <para>
            Levels of the tree to print.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--tree-path</option>
          <replaceable>path</replaceable>
        </term>
        <listitem>
          <para>
            Subtree to print.  The <replaceable>path</replaceable> is
            a slash ("/") separated path to a subtree to print.  For
            example "/nacm/groups".  All ancestors and the selected
            subtree are printed.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--tree-print-groupings</option>
        </term>
        <listitem>
          <para>
            Print the top-level groupings defined in the module.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--tree-print-structures</option>
        </term>
        <listitem>
          <para>
            Print the ietf-yang-structure-ext:structure structures
            defined in the module.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--tree-print-yang-data</option>
        </term>
        <listitem>
          <para>
            Print the ietf-restconf:yang-data structures defined in
            the module.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--tree-line-length</option>
          <replaceable>maxlen</replaceable>
        </term>
        <listitem>
          <para>
            Try to break lines so they are no longer than
            <replaceable>maxlen</replaceable>.  This is a best effort
            algorithm.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--tree-module-name-prefix</option>
          <replaceable>maxlen</replaceable>
        </term>
        <listitem>
          <para>
            Use the module name (instead of the prefix) to prefix
            parameters and types.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.flatten_output">
    <title>Flatten Output</title>
    <para>
      The <emphasis>flatten</emphasis> output flattens provided
      YANG module and outputs the schema nodes and some of their
      properties in CSV format.
    </para>
    <para>
      Flatten output specific options:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--flatten-no-header</option></term>
        <listitem>
          <para>
            Do not emit the CSV header.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-keyword</option></term>
        <listitem>
          <para>
            Output the keyword.
            This will resolve as container, leaf, etc.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-type</option></term>
        <listitem>
          <para>
            Output the top-level type.
            This will resolve to a module-prefixed type.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-primitive-type</option></term>
        <listitem>
          <para>
            Output the primitive type.
            This resolves to a YANG type such as uint64.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-flag</option></term>
        <listitem>
          <para>
            Output flag property.
            Derives a flag - for instance rw/ro for config, or x for RPC.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-description</option></term>
        <listitem>
          <para>
            Output the description.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-keys</option></term>
        <listitem>
          <para>
            Output whether the XPath is identified as a key.
            <emphasis>key</emphasis> or null will be output per XPath.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-keys-in-xpath</option></term>
        <listitem>
          <para>
            Output the XPath with keys in path.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-prefix-in-xpath</option></term>
        <listitem>
          <para>
            Output the XPath with prefixes instead of modules.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-qualified-in-xpath</option></term>
        <listitem>
          <para>
            Output the qualified XPath i.e. /module1:root/module1:node/module2:node/...
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-qualified-module-and-prefix-path</option></term>
        <listitem>
          <para>
            Output an XPath with both module and prefix i.e. /module1:prefix1:root/...
            This is <emphasis>NOT</emphasis> a colloquial syntax of XPath. Emitted separately.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-deviated</option></term>
        <listitem>
          <para>
            Output deviated nodes in the schema as well.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-data-keywords</option></term>
        <listitem>
          <para>
            Flatten all data keywords instead of only data definition keywords.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--flatten-filter-keyword</option>
          <replaceable>keyword</replaceable>
        </term>
        <listitem>
          <para>
            Filter output to only desired keywords.
            Keywords specified are what will be displayed in output.
            Can be specified more than once.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--flatten-filter-primitive</option>
          <replaceable>primitive_type</replaceable>
        </term>
        <listitem>
          <para>
            Filter output to only desired primitive types.
            Primitives specified are what will be displayed in output.
            Can be specified more than once.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--flatten-filter-flag</option>
          <replaceable>choice</replaceable>
        </term>
        <listitem>
          <para>
            Filter output to flag.
            <emphasis>rw</emphasis> for configuration data.
            <emphasis>ro</emphasis> for non-configuration data, output parameters to rpcs and actions, and notification parameters.
            <emphasis>w</emphasis> for input parameters to rpcs and actions.
            <emphasis>u</emphasis> for uses of a grouping.
            <emphasis>x</emphasis> for rpcs and actions.
            <emphasis>n</emphasis> for notifications.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--flatten-csv-dialect</option>
          <replaceable>dialect</replaceable>
        </term>
        <listitem>
          <para>
            CSV dialect for output.
            excel | excel-tab | unix
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-ignore-no-primitive</option></term>
        <listitem>
          <para>
            Ignore error if primitive is missing.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-status</option></term>
        <listitem>
          <para>
            Output the status statement value.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--flatten-resolve-leafref</option></term>
        <listitem>
          <para>
            Output the XPath of the leafref target.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.uml_output">
    <title>UML Output</title>
    <para>
      The <emphasis>uml</emphasis> output prints an output that can be
      used as input-file to <command>plantuml</command>
      (<uri>http://plantuml.sourceforge.net</uri>) in order to
      generate a UML diagram.  Note that it requires
      <command>graphviz</command>
      (<uri>http://www.graphviz.org/</uri>).
    </para>
    <para>
      For large diagrams you may need to increase the Java heap-size
      by the -XmxSIZEm option, to java.  For example: <userinput>java
      -Xmx1024m -jar plantuml.jar ....</userinput>
    </para>
    <para>
      Options for the <emphasis>UML</emphasis> output format:
    </para>

    <variablelist>

      <varlistentry>
        <term><option>--uml-classes-only</option></term>
        <listitem>
          <para>
            Generate UML with classes only, no attributes
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--uml-split-pages=<replaceable>layout</replaceable></option>
        </term>
        <listitem>
          <para>
            Generate UML output split into pages, NxN, example 2x2.
            One .png file per page will be rendered.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--uml-output-directory=<replaceable>directory</replaceable></option>
        </term>
        <listitem>
          <para>
            Put the generated .png files(s) in the specified output directory.
            Default is "img/"
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--uml-title=<replaceable>title</replaceable></option>
        </term>
        <listitem>
          <para>
            Set the title of the generated UML diagram, (default is
            YANG module name).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--uml-header=<replaceable>header</replaceable></option>
        </term>
        <listitem>
          <para>
            Set the header of the generated UML diagram.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--uml-footer=<replaceable>footer</replaceable></option>
        </term>
        <listitem>
          <para>
            Set the footer of the generated UML diagram.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--uml-long-identifers</option></term>
        <listitem>
          <para>
            Use complete YANG schema identifiers for UML class names.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--uml-no=<replaceable>arglist</replaceable></option>
        </term>
        <listitem>
          <para>
            This option suppresses specified arguments in the
            generated UML diagram.  Valid arguments are: uses,
            leafref, identity, identityref, typedef, annotation,
            import, circles, stereotypes. Annotation suppresses YANG
            constructs rendered as annotations, examples module info,
            config statements for containers.  Example
            --uml-no=circles,stereotypes,typedef,import
          </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term>
          <option>--uml-truncate=<replaceable>elemlist</replaceable></option>
        </term>
        <listitem>
          <para>
            Leafref attributes and augment elements can have long
            paths making the classes too wide. This option will only
            show the tail of the path.  Example
            --uml-truncate=augment,leafref.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--uml-inline-groupings</option></term>
        <listitem>
          <para>
            Render the diagram with groupings inlined.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--uml-inline-augments</option></term>
        <listitem>
          <para>
            Render the diagram with augments inlined.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--uml-max-enums=<replaceable>number</replaceable></option>
        </term>
        <listitem>
          <para>
            Maximum of enum items rendered.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--uml-filter-file=<replaceable>file</replaceable></option>
        </term>
        <listitem>
          <para>
            NOT IMPLEMENTED: Only paths in the filter file will be
            included in the diagram. A default filter file is generated by
            option --filter.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>


  <refsect1 xml:id="man.1.pyang.yang_output">
    <title>YANG Output</title>
    <para>
      Options for the <emphasis>yang</emphasis> output format:
    </para>

    <variablelist>
      <varlistentry>
        <term><option>--yang-canonical</option></term>
        <listitem>
          <para>
            Generate all statements in the canonical order.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--yang-remove-unused-imports</option></term>
        <listitem>
          <para>
            Remove unused import statements from the output.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--yang-remove-comments</option></term>
        <listitem>
          <para>
            Remove all comments from the output.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--yang-line-length</option>
        <replaceable>len</replaceable></term>
        <listitem>
          <para>
            Try to format each line with a maximum line length of
            <replaceable>len</replaceable>.  Does not reformat long
            lines within strings.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.yin_output">
    <title>YIN Output</title>
    <para>
      Options for the <emphasis>yin</emphasis> output format:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--yin-canonical</option></term>
        <listitem>
          <para>
            Generate all statements in the canonical order.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--yin-pretty-strings</option></term>
        <listitem>
          <para>
            Pretty print strings, i.e. print with extra whitespace in
            the string.  This is not strictly correct, since the
            whitespace is significant within the strings in XML, but
            the output is more readable.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.yang_extensions.xpath_functions">
    <title>YANG Extensions</title>
    <para>
      This section describes XPath functions that can be used in
      "must", "when", or "path" expressions in YANG modules, in
      addition to the core XPath 1.0 functions.
    </para>
    <para>
      <command>pyang</command> can be instructed to reject the usage
      of these functions with the parameter
      <parameter>--strict</parameter>.
    </para>

    <para>
      <command>Function:</command> <emphasis>node-set</emphasis>
      <command>deref</command>(<emphasis>node-set</emphasis>)
    </para>
    <para>
      The <function>deref</function> function follows the reference
      defined by the first node in document order in the argument
      node-set, and returns the nodes it refers to.
    </para>
    <para>
      If the first argument node is an
      <type>instance-identifier</type>, the function returns a
      node-set that contains the single node that the instance
      identifier refers to, if it exists.  If no such node exists,
      an empty node-set is returned.
    </para>
    <para>
      If the first argument node is a <type>leafref</type>, the
      function returns a node-set that contains the nodes that the
      leafref refers to.
    </para>
    <para>
      If the first argument node is of any other type, an empty
      node-set is returned.
    </para>
    <para>
      The following example shows how a leafref can be written with
      and without the <function>deref</function> function:
    </para>
    <informalexample>
      <programlisting>
/* without deref */

leaf my-ip {
  type leafref {
    path "/server/ip";
  }
}
leaf my-port {
  type leafref {
    path "/server[ip = current()/../my-ip]/port";
  }
}

/* with deref */

leaf my-ip {
  type leafref {
    path "/server/ip";
  }
}
leaf my-port {
  type leafref {
    path "deref(../my-ip)/../port";
  }
}
      </programlisting>
    </informalexample>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.example">
    <title>Example</title>

    <para>
      The following example validates the standard YANG modules with
      derived types:
    </para>

    <informalexample>
      <screen>$ pyang ietf-yang-types.yang ietf-inet-types.yang</screen>
    </informalexample>

    <para>
      The following example converts the ietf-yang-types module into
      YIN:
    </para>

    <informalexample>
      <screen>$ pyang -f yin -o ietf-yang-types.yin ietf-yang-types.yang</screen>
    </informalexample>

    <para>
      The following example converts the ietf-netconf-monitoring module into
      a UML diagram:
    </para>

    <informalexample>
      <screen>
        $ pyang -f uml ietf-netconf-monitoring.yang > \
        ietf-netconf-monitoring.uml
        $ java -jar plantuml.jar ietf-netconf-monitoring.uml
        $ open img/ietf-netconf-monitoring.png
      </screen>
    </informalexample>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.environment_variables">
    <title>Environment Variables</title>

    <para>
      pyang searches for referred modules in the colon (:) separated
      path defined by the environment variable
      <envar>$YANG_MODPATH</envar> and in the directory
      <envar>$YANG_INSTALL</envar><filename>/yang/modules</filename>.
    </para>

    <para>
      pyang searches for plugins in the colon (:) separated path
      defined by the environment variable
      <envar>$PYANG_PLUGINDIR</envar>.
    </para>

  </refsect1>


  <refsect1 xml:id="man.1.pyang.bugs">
    <title>Bugs</title>

    <orderedlist>
      <listitem>
        <para>
          The XPath arguments for the <emphasis>must</emphasis> and
          <emphasis>when</emphasis> statements are checked only for
          basic syntax errors.
        </para>
      </listitem>
    </orderedlist>

  </refsect1>

</refentry>
